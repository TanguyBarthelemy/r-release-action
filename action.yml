name: "Release an R Package"
description: "Automate R package release (merge main/dev, update DESCRIPTION, NEWS, tag, GitHub release)"
author: "Tanguy Barthelemy"

inputs:
  tag:
    description: "New release tag (e.g. v1.2.3)"
    required: true
  gh_repo:
    description: "GitHub repository (e.g. user/repo)"
    required: true
  github_token:
    description: "GitHub token with write permissions"
    required: true
    default: ${{ GITHUB_PAT }}
  main-branch:
    description: "Main branch name"
    required: true
    default: "main"
  dev-branch:
    description: "Development branch name (optional)"
    required: false

runs:
  using: "composite"

  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # important pour les merges et tags

    - name: Configure Git
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Install libcurl
      run: sudo apt-get install libcurl4-openssl-dev

    - name: Install R
      uses: r-lib/actions/setup-r@v2
      with:
        use-public-rspm: true

    - name: Install R dependencies
      shell: Rscript {0}
      run: |
        install.packages("remotes")
        remotes::install_github("TanguyBarthelemy/releaser")

    - name: Validate tag
      id: set-tag
      shell: Rscript {0}
      env:
        tag: ${{ inputs.tag }}
      run: |
        library("releaser")
        library("desc")

        current_version <- desc_get_version(file = ".")
        possible_tags <- paste0("v", get_different_future_version(version_number = current_version))

        tag <- Sys.getenv("tag")
        if (!startsWith(tag, "v")) tag <- paste0("v", tag)
        if (!tag %in% possible_tags) stop("Invalid tag. Possible tags: ", toString(possible_tags))

        system(paste0("echo \"tag=", tag, "\" >> \"$GITHUB_OUTPUT\""))

    - name: Update DESCRIPTION & NEWS
      shell: Rscript {0}
      env:
        tag: ${{ steps.set-tag.outputs.tag }}
        gh_repo: ${{ inputs.gh_repo }}
      run: |
        library("desc")
        library("releaser")
        tag <- Sys.getenv("tag")
        new_version <- substr(x = tag, start = 2, stop = nchar(tag))
        desc_set_version(version = new_version)
        update_news_md(new_version = new_version, path = ".", gh_repo = Sys.getenv("gh_repo"))

    - name: Commit release
      shell: bash
      env:
        CO_AUTHOR_NAME: ${{ github.actor }}
        CO_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
      run: |
        git add -A
        git commit -m "New release $tag" -m "Co-authored-by: ${CO_AUTHOR_NAME} <${CO_AUTHOR_EMAIL}>"

    - name: Merge dev branch into main (if applicable)
      if: ${{ inputs.main-branch != '' && inputs.dev-branch != '' && inputs.main-branch != inputs.dev-branch }}
      shell: bash
      env:
        MAIN_BRANCH: ${{ inputs.main-branch }}
        DEV_BRANCH: ${{ inputs.dev-branch }}
      run: |
        echo "Merging $DEV_BRANCH ‚Üí $MAIN_BRANCH"
        git checkout "$MAIN_BRANCH"
        git pull origin "$MAIN_BRANCH"
        git merge --no-ff "$DEV_BRANCH" -m "üîÄ Merge $DEV_BRANCH into $MAIN_BRANCH before release"

    - name: Tag release
      shell: bash
      env:
        tag: ${{ steps.set-tag.outputs.tag }}
      run: |
        git tag "$tag"

    - name: Merge main back into dev (if applicable)
      if: ${{ inputs.main-branch != '' && inputs.dev-branch != '' && inputs.main-branch != inputs.dev-branch }}
      shell: bash
      env:
        MAIN_BRANCH: ${{ inputs.main-branch }}
        DEV_BRANCH: ${{ inputs.dev-branch }}
      run: |
        echo "Merging $MAIN_BRANCH ‚Üí $DEV_BRANCH"
        git checkout "$DEV_BRANCH"
        git pull origin "$DEV_BRANCH"
        git merge --no-ff "$MAIN_BRANCH" -m "üîÅ Merge $MAIN_BRANCH into $DEV_BRANCH after release"

    - name: Bump dev version
      shell: Rscript {0}
      run: |
        library("desc")
        desc_bump_version(which = "dev")

    - name: Commit dev bump
      shell: bash
      env:
        CO_AUTHOR_NAME: ${{ github.actor }}
        CO_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
      run: |
        git add -A
        git commit -m "üîñ Auto-bump develop version" -m "Co-authored-by: ${CO_AUTHOR_NAME} <${CO_AUTHOR_EMAIL}>"

    # --- Push everything ---
    - name: Push branches and tags
      shell: bash
      env:
        MAIN_BRANCH: ${{ inputs.main-branch }}
        DEV_BRANCH: ${{ inputs.dev-branch }}
        tag: ${{ steps.set-tag.outputs.tag }}
      run: |
        if [ -n "$MAIN_BRANCH" ] && [ -n "$DEV_BRANCH" ] && [ "$MAIN_BRANCH" != "$DEV_BRANCH" ]; then
          git push --atomic origin "$MAIN_BRANCH" "$DEV_BRANCH" "$TAG"
        else
          git push --atomic origin "$MAIN_BRANCH" "$TAG"
        fi

    # --- Create release body ---
    - name: Generate release body
      id: create-body
      shell: Rscript {0}
      env:
        tag: ${{ steps.set-tag.outputs.tag }}
      run: |
        library("releaser")
        tag <- Sys.getenv("tag")
        new_version <- substr(tag, 2, nchar(tag))
        release_body <- paste0("# Release ", new_version, "\n\n", get_changes(".", new_version))
        cat("body<<EOF\n", release_body, "\nEOF", file = Sys.getenv("GITHUB_OUTPUT"))

    # --- Publish release ---
    - name: Publish GitHub release (draft)
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.set-tag.outputs.tag }}
        body: ${{ steps.create-body.outputs.body }}
        draft: true
